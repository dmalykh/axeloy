// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	message "github.com/dmalykh/axeloy/axeloy/message"
	mock "github.com/stretchr/testify/mock"

	model "github.com/dmalykh/axeloy/axeloy/message/model"

	uuid "github.com/google/uuid"
)

// MessageRepository is an autogenerated mock type for the MessageRepository type
type MessageRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, msg
func (_m *MessageRepository) Create(ctx context.Context, msg message.Message) error {
	ret := _m.Called(ctx, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, message.Message) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MessageRepository) GetById(ctx context.Context, id uuid.UUID) (*model.Message, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Message
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Message); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, getUUID, status, info
func (_m *MessageRepository) UpdateStatus(ctx context.Context, getUUID uuid.UUID, status model.Status, info ...string) error {
	_va := make([]interface{}, len(info))
	for _i := range info {
		_va[_i] = info[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, getUUID, status)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.Status, ...string) error); ok {
		r0 = rf(ctx, getUUID, status, info...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
