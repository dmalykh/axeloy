// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dmalykh/axeloy/axeloy/way/model"
	mock "github.com/stretchr/testify/mock"
)

// WayRepository is an autogenerated mock type for the WayRepository type
type WayRepository struct {
	mock.Mock
}

// AddListener provides a mock function with given fields: ctx, name, driverName, params
func (_m *WayRepository) AddListener(ctx context.Context, name string, driverName string, params map[string]interface{}) error {
	ret := _m.Called(ctx, name, driverName, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]interface{}) error); ok {
		r0 = rf(ctx, name, driverName, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddSender provides a mock function with given fields: ctx, name, driverName, params
func (_m *WayRepository) AddSender(ctx context.Context, name string, driverName string, params map[string]interface{}) error {
	ret := _m.Called(ctx, name, driverName, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]interface{}) error); ok {
		r0 = rf(ctx, name, driverName, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *WayRepository) GetByName(ctx context.Context, name string) (model.Way, error) {
	ret := _m.Called(ctx, name)

	var r0 model.Way
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Way); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(model.Way)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByType provides a mock function with given fields: ctx, t
func (_m *WayRepository) GetByType(ctx context.Context, t model.WayType) ([]model.Way, error) {
	ret := _m.Called(ctx, t)

	var r0 []model.Way
	if rf, ok := ret.Get(0).(func(context.Context, model.WayType) []model.Way); ok {
		r0 = rf(ctx, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Way)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.WayType) error); ok {
		r1 = rf(ctx, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
