// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	profile "github.com/dmalykh/axeloy/axeloy/profile"
	mock "github.com/stretchr/testify/mock"

	way "github.com/dmalykh/axeloy/axeloy/way"
)

// Destination is an autogenerated mock type for the Destination type
type Destination struct {
	mock.Mock
}

// GetProfile provides a mock function with given fields: ctx
func (_m *Destination) GetProfile(ctx context.Context) profile.Profile {
	ret := _m.Called(ctx)

	var r0 profile.Profile
	if rf, ok := ret.Get(0).(func(context.Context) profile.Profile); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(profile.Profile)
		}
	}

	return r0
}

// GetWays provides a mock function with given fields: ctx
func (_m *Destination) GetWays(ctx context.Context) []way.Sender {
	ret := _m.Called(ctx)

	var r0 []way.Sender
	if rf, ok := ret.Get(0).(func(context.Context) []way.Sender); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]way.Sender)
		}
	}

	return r0
}

// SetProfile provides a mock function with given fields: ctx, p
func (_m *Destination) SetProfile(ctx context.Context, p profile.Profile) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, profile.Profile) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetWays provides a mock function with given fields: ctx, senders
func (_m *Destination) SetWays(ctx context.Context, senders ...way.Sender) error {
	_va := make([]interface{}, len(senders))
	for _i := range senders {
		_va[_i] = senders[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...way.Sender) error); ok {
		r0 = rf(ctx, senders...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
