// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	message "github.com/dmalykh/axeloy/axeloy/message"
	mock "github.com/stretchr/testify/mock"

	router "github.com/dmalykh/axeloy/axeloy/router"
)

// Tracker is an autogenerated mock type for the Tracker type
type Tracker struct {
	mock.Mock
}

// AddAttempt provides a mock function with given fields: ctx, t, status, info
func (_m *Tracker) AddAttempt(ctx context.Context, t router.Track, status router.TrackStatus, info ...string) error {
	_va := make([]interface{}, len(info))
	for _i := range info {
		_va[_i] = info[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, t, status)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, router.Track, router.TrackStatus, ...string) error); ok {
		r0 = rf(ctx, t, status, info...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DefineTracks provides a mock function with given fields: ctx, m, destinations
func (_m *Tracker) DefineTracks(ctx context.Context, m message.Message, destinations router.Destination) ([]router.Track, error) {
	ret := _m.Called(ctx, m, destinations)

	var r0 []router.Track
	if rf, ok := ret.Get(0).(func(context.Context, message.Message, router.Destination) []router.Track); ok {
		r0 = rf(ctx, m, destinations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]router.Track)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, message.Message, router.Destination) error); ok {
		r1 = rf(ctx, m, destinations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnsentTracks provides a mock function with given fields: ctx
func (_m *Tracker) GetUnsentTracks(ctx context.Context) ([]router.Track, error) {
	ret := _m.Called(ctx)

	var r0 []router.Track
	if rf, ok := ret.Get(0).(func(context.Context) []router.Track); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]router.Track)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: ctx, track
func (_m *Tracker) Send(ctx context.Context, track router.Track) error {
	ret := _m.Called(ctx, track)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, router.Track) error); ok {
		r0 = rf(ctx, track)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
