// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dmalykh/axeloy/axeloy/router/model"
	mock "github.com/stretchr/testify/mock"

	profile "github.com/dmalykh/axeloy/axeloy/profile"
)

// RouteRepository is an autogenerated mock type for the RouteRepository type
type RouteRepository struct {
	mock.Mock
}

// CreateRoute provides a mock function with given fields: ctx, route
func (_m *RouteRepository) CreateRoute(ctx context.Context, route ...*model.Route) error {
	_va := make([]interface{}, len(route))
	for _i := range route {
		_va[_i] = route[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*model.Route) error); ok {
		r0 = rf(ctx, route...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBySourceProfile provides a mock function with given fields: ctx, _a1
func (_m *RouteRepository) GetBySourceProfile(ctx context.Context, _a1 profile.Profile) ([]*model.Route, error) {
	ret := _m.Called(ctx, _a1)

	var r0 []*model.Route
	if rf, ok := ret.Get(0).(func(context.Context, profile.Profile) []*model.Route); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Route)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, profile.Profile) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
