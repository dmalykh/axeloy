// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dmalykh/axeloy/axeloy/router/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// TrackRepository is an autogenerated mock type for the TrackRepository type
type TrackRepository struct {
	mock.Mock
}

// CreateTrack provides a mock function with given fields: ctx, track
func (_m *TrackRepository) CreateTrack(ctx context.Context, track ...*model.Track) error {
	_va := make([]interface{}, len(track))
	for _i := range track {
		_va[_i] = track[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*model.Track) error); ok {
		r0 = rf(ctx, track...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FinishAttempt provides a mock function with given fields: ctx, attempt, status, info
func (_m *TrackRepository) FinishAttempt(ctx context.Context, attempt *model.Attempt, status model.AttemptStatus, info ...string) error {
	_va := make([]interface{}, len(info))
	for _i := range info {
		_va[_i] = info[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, attempt, status)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Attempt, model.AttemptStatus, ...string) error); ok {
		r0 = rf(ctx, attempt, status, info...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTracksByMessageId provides a mock function with given fields: ctx, messageId
func (_m *TrackRepository) GetTracksByMessageId(ctx context.Context, messageId uuid.UUID) ([]*model.Track, error) {
	ret := _m.Called(ctx, messageId)

	var r0 []*model.Track
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*model.Track); ok {
		r0 = rf(ctx, messageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Track)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, messageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetStatus provides a mock function with given fields: ctx, id, status, info
func (_m *TrackRepository) SetStatus(ctx context.Context, id uuid.UUID, status model.TrackStatus, info ...string) error {
	_va := make([]interface{}, len(info))
	for _i := range info {
		_va[_i] = info[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, status)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.TrackStatus, ...string) error); ok {
		r0 = rf(ctx, id, status, info...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartAttempt provides a mock function with given fields: ctx, trackId, status
func (_m *TrackRepository) StartAttempt(ctx context.Context, trackId uuid.UUID, status model.AttemptStatus) (*model.Attempt, error) {
	ret := _m.Called(ctx, trackId, status)

	var r0 *model.Attempt
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.AttemptStatus) *model.Attempt); ok {
		r0 = rf(ctx, trackId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Attempt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, model.AttemptStatus) error); ok {
		r1 = rf(ctx, trackId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
